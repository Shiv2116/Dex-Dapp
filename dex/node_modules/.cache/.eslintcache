[{"D:\\PROJECTS\\Eth_Projects\\BuildProjects\\dexStarter\\dex\\src\\index.js":"1","D:\\PROJECTS\\Eth_Projects\\BuildProjects\\dexStarter\\dex\\src\\App.js":"2","D:\\PROJECTS\\Eth_Projects\\BuildProjects\\dexStarter\\dex\\src\\components\\Header.js":"3","D:\\PROJECTS\\Eth_Projects\\BuildProjects\\dexStarter\\dex\\src\\components\\Tokens.js":"4","D:\\PROJECTS\\Eth_Projects\\BuildProjects\\dexStarter\\dex\\src\\components\\Swap.js":"5"},{"size":741,"mtime":1690302726527,"results":"6","hashOfConfig":"7"},{"size":831,"mtime":1690304315580,"results":"8","hashOfConfig":"7"},{"size":936,"mtime":1690303971065,"results":"9","hashOfConfig":"7"},{"size":116,"mtime":1690271048243,"results":"10","hashOfConfig":"7"},{"size":6746,"mtime":1690306266001,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2j0pkc",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},"D:\\PROJECTS\\Eth_Projects\\BuildProjects\\dexStarter\\dex\\src\\index.js",[],[],"D:\\PROJECTS\\Eth_Projects\\BuildProjects\\dexStarter\\dex\\src\\App.js",[],[],"D:\\PROJECTS\\Eth_Projects\\BuildProjects\\dexStarter\\dex\\src\\components\\Header.js",[],[],"D:\\PROJECTS\\Eth_Projects\\BuildProjects\\dexStarter\\dex\\src\\components\\Tokens.js",[],[],"D:\\PROJECTS\\Eth_Projects\\BuildProjects\\dexStarter\\dex\\src\\components\\Swap.js",["28","29","30","31","32"],[],"import React,{useState,useEffect} from 'react'\r\nimport { Input, Popover, Radio, Modal, message } from \"antd\";\r\nimport {\r\n  ArrowDownOutlined,\r\n  DownOutlined,\r\n  SettingOutlined,\r\n} from \"@ant-design/icons\";\r\n\r\nimport tokenList from \"../tokenList.json\"\r\nimport axios from \"axios\";\r\nimport {userSendTransaction,useSendTransaction,useWaitForTransaction} from \"wagmi\";\r\n\r\nfunction Swap(props) {\r\n  const {address,isConnected} = props\r\n  const [slippage,setSlippage]=useState(2.5);\r\n  const [tokenOneAmount,setTokenOneAmount]=useState(0);\r\n  const [tokenTwoAmount,setTokenTwoAmount]=useState(0);\r\n  const [messageApi,contextHolder] = message.useMessage();\r\n  const [tokenOne,setTokenOne] = useState(tokenList[0]);\r\n  const [tokenTwo,setTokenTwo] = useState(tokenList[1]);\r\n  const [isOpen,setIsOpen]=useState(false);\r\n  const [changeToken,setChangeToken] = useState(1); \r\n  const [prices,setPrices] = useState(null);\r\n  const [txDetails,setTxDetails] =useState({\r\n    to:null,\r\n    data:null,\r\n    value:null,\r\n  });\r\n\r\n  const {data,sendTransaction} = useSendTransaction({\r\n    request:{\r\n      from:address,\r\n      to:String(txDetails.to),\r\n      data: String(txDetails.data),\r\n      value:String(txDetails.value),\r\n    }\r\n  })\r\n\r\n  const {isLoading,isSuccess} = useWaitForTransaction({\r\n    hash: data?.hash,\r\n  })\r\n\r\n\r\n  function handleSlippageChange(e){\r\n    setSlippage(e.target.value);\r\n  }\r\n  function changeAmount(e){\r\n    setTokenOneAmount(e.target.value);\r\n    if(e.target.value && prices){\r\n      setTokenTwoAmount((e.target.value * prices.ratio).toFixed(2))\r\n  }\r\n    else{\r\n      setTokenTwoAmount(0);\r\n    }\r\n  }\r\n\r\n  function switchToken(){\r\n    setPrices(null);\r\n    setTokenOneAmount(0);\r\n    setTokenTwoAmount(0);\r\n    const one = tokenOne;\r\n    const two = tokenTwo;\r\n    setTokenOne(two);\r\n    setTokenTwo(one);\r\n\r\n    fetchPrices(two.address,one.address)\r\n  }\r\n\r\n  function openModal(asset){\r\n    setChangeToken(asset);\r\n    setIsOpen(true);\r\n  }\r\n  function modifyToken(i){\r\n\r\n    setPrices(null);\r\n    setTokenOneAmount(0);\r\n    setTokenTwoAmount(0);\r\n\r\n    if(changeToken === 1){\r\n      setTokenOne(tokenList[i]);\r\n      fetchPrices(tokenList[i].address,tokenTwo.address)\r\n    }else{\r\n      setTokenTwo(tokenList[i]);\r\n      fetchPrices(tokenOne.address,tokenList[i].address)\r\n    }\r\n    setIsOpen(false);\r\n  }\r\n\r\n  async function fetchPrices(one,two){\r\n    const res = await axios.get('http://localhost:3001/tokenPrice',{\r\n      params:{addressOne: one,addressTwo:two}\r\n    })\r\n\r\n    console.log(res.data);\r\n    setPrices(res.data)\r\n  }\r\n\r\n  async function fetchDexSwap(){\r\n\r\n    const allowance = await axios.get(`https://api.1inch.io/v5.0/1/approve/allowance?tokenAddress=${tokenOne.address}&walletAddress=${address}`)\r\n  \r\n    if(allowance.data.allowance === \"0\"){\r\n\r\n      const approve = await axios.get(`https://api.1inch.io/v5.0/1/approve/transaction?tokenAddress=${tokenOne.address}`)\r\n\r\n      setTxDetails(approve.data);\r\n      console.log(\"not approved\")\r\n      return\r\n\r\n    }\r\n\r\n    const tx = await axios.get(\r\n      `https://api.1inch.io/v5.0/1/swap?fromTokenAddress=${tokenOne.address}&toTokenAddress=${tokenTwo.address}&amount=${tokenOneAmount.padEnd(tokenOne.decimals+tokenOneAmount.length, '0')}&fromAddress=${address}&slippage=${slippage}`\r\n    )\r\n\r\n    let decimals = Number(`1E${tokenTwo.decimals}`)\r\n    setTokenTwoAmount((Number(tx.data.toTokenAmount)/decimals).toFixed(2));\r\n\r\n    setTxDetails(tx.data.tx);\r\n  \r\n  }\r\n\r\n  \r\n  \r\n\r\n  useEffect(()=>{\r\n\r\n    fetchPrices(tokenList[0].address,tokenList[1].address)\r\n  },[])\r\n\r\n  useEffect(()=>{\r\n\r\n    if(txDetails.to && isConnected){\r\n      sendTransaction();\r\n    }\r\n  },[txDetails])\r\n\r\n  useEffect(()=>{\r\n    messageApi.destroy();\r\n    if(isLoading){\r\n      messageApi.open({\r\n        type:'loading',\r\n        content:'Waiting for transaction ...',\r\n        duration:0,\r\n      })\r\n    }\r\n  },[isLoading])\r\n\r\n  useEffect(()=>{\r\n    messageApi.destroy();\r\n    if(isSuccess){\r\n      messageApi.open({\r\n        type: 'success',\r\n        content: 'Transaction Successful',\r\n        duration: 1.5,\r\n      })\r\n    }else if(txDetails.to){\r\n      messageApi.open({\r\n        type: 'error',\r\n        content: 'Transaction Failed',\r\n        duration: 1.50,\r\n      })\r\n    }\r\n\r\n\r\n  },[isSuccess])\r\n\r\n  const settings = ( \r\n    <>\r\n      <div>Slippage Tolerance</div>\r\n      <div>\r\n        <Radio.Group value={slippage} onChange={handleSlippageChange}>\r\n          <Radio.Button value={0.5}>0.5%</Radio.Button>\r\n          <Radio.Button value={2.5}>2.5%</Radio.Button>\r\n          <Radio.Button value={5.0}>5.0%</Radio.Button>\r\n        </Radio.Group>\r\n      </div>\r\n      </>\r\n    );\r\n\r\n\r\n  return (\r\n    <>\r\n    <contextHolder></contextHolder>\r\n    <Modal\r\n      open={isOpen}\r\n      footer={null}\r\n      onCancel={()=> setIsOpen(false)}\r\n      title=\"Select a token\"\r\n    >\r\n      <div className='modalContent'>\r\n        {tokenList?.map((e,i)=>{\r\n          return (\r\n            <div \r\n              className=\"tokenChoice\"\r\n              key={i}\r\n              onClick={()=> modifyToken(i)}\r\n            >\r\n              <img src={e.img} alt={e.ticker} className='tokenLogo'/>\r\n              <div className='tokenChoiceNames'>\r\n                <div className='tokenName'>{e.name}</div>\r\n                <div className='tokenTicker'>{e.ticker}</div>\r\n              </div>\r\n            </div>\r\n        );\r\n        })}\r\n      </div>\r\n    </Modal>\r\n      <div className='tradeBox'>\r\n        <div className='tradeBoxHeader'>\r\n        <h4>Swap</h4>\r\n        <Popover \r\n        content ={settings}\r\n        title = \"Settings\"\r\n        trigger=\"click\"\r\n        placement='bottomRight'\r\n        >\r\n        <SettingOutlined className=\"cog\" />\r\n        </Popover>\r\n        </div>\r\n        <div className='inputs'>\r\n          \r\n          <Input placeholder='0' value={tokenOneAmount} onChange={changeAmount} disabled={!prices}/>\r\n          <Input placeholder='0' value={tokenTwoAmount} disabled={true}/>\r\n          <div className='switchButton' onClick={switchToken}>\r\n            <ArrowDownOutlined className='switchArrow'/>\r\n          </div>\r\n          <div className='assetOne' onClick={()=> openModal(1)}>\r\n            <img src={tokenOne.img}  alt =\"assetOneLogo\" className=\"assetLogo\"/>\r\n            {tokenOne.ticker}\r\n            <DownOutlined/>\r\n          </div>\r\n          <div className='assetTwo' onClick={()=> openModal(2)}>\r\n          <img src={tokenTwo.img}  alt =\"assetTwoLogo\" className=\"assetLogo\"/>\r\n            {tokenTwo.ticker}\r\n            <DownOutlined/>\r\n          </div>\r\n        </div>\r\n        <div className='swapButton' disabled={!tokenOneAmount || !isConnected} onClick={fetchDexSwap}>Swap</div>\r\n      </div>\r\n      </>\r\n  )\r\n}\r\n\r\nexport default Swap",{"ruleId":"33","severity":1,"message":"34","line":11,"column":9,"nodeType":"35","messageId":"36","endLine":11,"endColumn":28},{"ruleId":"33","severity":1,"message":"37","line":18,"column":21,"nodeType":"35","messageId":"36","endLine":18,"endColumn":34},{"ruleId":"38","severity":1,"message":"39","line":136,"column":5,"nodeType":"40","endLine":136,"endColumn":16,"suggestions":"41"},{"ruleId":"38","severity":1,"message":"42","line":147,"column":5,"nodeType":"40","endLine":147,"endColumn":16,"suggestions":"43"},{"ruleId":"38","severity":1,"message":"44","line":166,"column":5,"nodeType":"40","endLine":166,"endColumn":16,"suggestions":"45"},"no-unused-vars","'userSendTransaction' is defined but never used.","Identifier","unusedVar","'contextHolder' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'isConnected' and 'sendTransaction'. Either include them or remove the dependency array.","ArrayExpression",["46"],"React Hook useEffect has a missing dependency: 'messageApi'. Either include it or remove the dependency array.",["47"],"React Hook useEffect has missing dependencies: 'messageApi' and 'txDetails.to'. Either include them or remove the dependency array.",["48"],{"desc":"49","fix":"50"},{"desc":"51","fix":"52"},{"desc":"53","fix":"54"},"Update the dependencies array to be: [isConnected, sendTransaction, txDetails]",{"range":"55","text":"56"},"Update the dependencies array to be: [isLoading, messageApi]",{"range":"57","text":"58"},"Update the dependencies array to be: [isSuccess, messageApi, txDetails.to]",{"range":"59","text":"60"},[3663,3674],"[isConnected, sendTransaction, txDetails]",[3885,3896],"[isLoading, messageApi]",[4264,4275],"[isSuccess, messageApi, txDetails.to]"]